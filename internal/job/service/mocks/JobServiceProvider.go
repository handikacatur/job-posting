// Code generated by mockery v2.42.0. DO NOT EDIT.

package service

import (
	context "context"

	model_error "github.com/handikacatur/jobs-api/internal/model/model_error"
	mock "github.com/stretchr/testify/mock"

	request "github.com/handikacatur/jobs-api/internal/job/model/request"

	response "github.com/handikacatur/jobs-api/internal/job/model/response"
)

// MockJobServiceProvider is an autogenerated mock type for the JobServiceProvider type
type MockJobServiceProvider struct {
	mock.Mock
}

type MockJobServiceProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobServiceProvider) EXPECT() *MockJobServiceProvider_Expecter {
	return &MockJobServiceProvider_Expecter{mock: &_m.Mock}
}

// CreateJob provides a mock function with given fields: ctx, req
func (_m *MockJobServiceProvider) CreateJob(ctx context.Context, req request.CreateJobRequest) model_error.ErrorIface {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 model_error.ErrorIface
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateJobRequest) model_error.ErrorIface); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model_error.ErrorIface)
		}
	}

	return r0
}

// MockJobServiceProvider_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockJobServiceProvider_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - req request.CreateJobRequest
func (_e *MockJobServiceProvider_Expecter) CreateJob(ctx interface{}, req interface{}) *MockJobServiceProvider_CreateJob_Call {
	return &MockJobServiceProvider_CreateJob_Call{Call: _e.mock.On("CreateJob", ctx, req)}
}

func (_c *MockJobServiceProvider_CreateJob_Call) Run(run func(ctx context.Context, req request.CreateJobRequest)) *MockJobServiceProvider_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.CreateJobRequest))
	})
	return _c
}

func (_c *MockJobServiceProvider_CreateJob_Call) Return(_a0 model_error.ErrorIface) *MockJobServiceProvider_CreateJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobServiceProvider_CreateJob_Call) RunAndReturn(run func(context.Context, request.CreateJobRequest) model_error.ErrorIface) *MockJobServiceProvider_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobList provides a mock function with given fields: ctx, req
func (_m *MockJobServiceProvider) GetJobList(ctx context.Context, req request.GetJobsRequest) ([]response.GetJobsResponseData, model_error.ErrorIface) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetJobList")
	}

	var r0 []response.GetJobsResponseData
	var r1 model_error.ErrorIface
	if rf, ok := ret.Get(0).(func(context.Context, request.GetJobsRequest) ([]response.GetJobsResponseData, model_error.ErrorIface)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.GetJobsRequest) []response.GetJobsResponseData); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.GetJobsResponseData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.GetJobsRequest) model_error.ErrorIface); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model_error.ErrorIface)
		}
	}

	return r0, r1
}

// MockJobServiceProvider_GetJobList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobList'
type MockJobServiceProvider_GetJobList_Call struct {
	*mock.Call
}

// GetJobList is a helper method to define mock.On call
//   - ctx context.Context
//   - req request.GetJobsRequest
func (_e *MockJobServiceProvider_Expecter) GetJobList(ctx interface{}, req interface{}) *MockJobServiceProvider_GetJobList_Call {
	return &MockJobServiceProvider_GetJobList_Call{Call: _e.mock.On("GetJobList", ctx, req)}
}

func (_c *MockJobServiceProvider_GetJobList_Call) Run(run func(ctx context.Context, req request.GetJobsRequest)) *MockJobServiceProvider_GetJobList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.GetJobsRequest))
	})
	return _c
}

func (_c *MockJobServiceProvider_GetJobList_Call) Return(_a0 []response.GetJobsResponseData, _a1 model_error.ErrorIface) *MockJobServiceProvider_GetJobList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobServiceProvider_GetJobList_Call) RunAndReturn(run func(context.Context, request.GetJobsRequest) ([]response.GetJobsResponseData, model_error.ErrorIface)) *MockJobServiceProvider_GetJobList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobServiceProvider creates a new instance of MockJobServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobServiceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobServiceProvider {
	mock := &MockJobServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
