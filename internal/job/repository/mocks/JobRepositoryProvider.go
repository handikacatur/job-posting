// Code generated by mockery v2.42.0. DO NOT EDIT.

package repository

import (
	context "context"

	entity "github.com/handikacatur/jobs-api/internal/job/model/entity"
	mock "github.com/stretchr/testify/mock"

	request "github.com/handikacatur/jobs-api/internal/job/model/request"
)

// MockJobRepositoryProvider is an autogenerated mock type for the JobRepositoryProvider type
type MockJobRepositoryProvider struct {
	mock.Mock
}

type MockJobRepositoryProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobRepositoryProvider) EXPECT() *MockJobRepositoryProvider_Expecter {
	return &MockJobRepositoryProvider_Expecter{mock: &_m.Mock}
}

// CreateJob provides a mock function with given fields: ctx, req
func (_m *MockJobRepositoryProvider) CreateJob(ctx context.Context, req request.CreateJobRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.CreateJobRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJobRepositoryProvider_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockJobRepositoryProvider_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - req request.CreateJobRequest
func (_e *MockJobRepositoryProvider_Expecter) CreateJob(ctx interface{}, req interface{}) *MockJobRepositoryProvider_CreateJob_Call {
	return &MockJobRepositoryProvider_CreateJob_Call{Call: _e.mock.On("CreateJob", ctx, req)}
}

func (_c *MockJobRepositoryProvider_CreateJob_Call) Run(run func(ctx context.Context, req request.CreateJobRequest)) *MockJobRepositoryProvider_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.CreateJobRequest))
	})
	return _c
}

func (_c *MockJobRepositoryProvider_CreateJob_Call) Return(_a0 error) *MockJobRepositoryProvider_CreateJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJobRepositoryProvider_CreateJob_Call) RunAndReturn(run func(context.Context, request.CreateJobRequest) error) *MockJobRepositoryProvider_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobs provides a mock function with given fields: ctx, _a1
func (_m *MockJobRepositoryProvider) GetJobs(ctx context.Context, _a1 request.GetJobsRequest) ([]entity.JobToCompany, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetJobs")
	}

	var r0 []entity.JobToCompany
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.GetJobsRequest) ([]entity.JobToCompany, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.GetJobsRequest) []entity.JobToCompany); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.JobToCompany)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.GetJobsRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJobRepositoryProvider_GetJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobs'
type MockJobRepositoryProvider_GetJobs_Call struct {
	*mock.Call
}

// GetJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.GetJobsRequest
func (_e *MockJobRepositoryProvider_Expecter) GetJobs(ctx interface{}, _a1 interface{}) *MockJobRepositoryProvider_GetJobs_Call {
	return &MockJobRepositoryProvider_GetJobs_Call{Call: _e.mock.On("GetJobs", ctx, _a1)}
}

func (_c *MockJobRepositoryProvider_GetJobs_Call) Run(run func(ctx context.Context, _a1 request.GetJobsRequest)) *MockJobRepositoryProvider_GetJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.GetJobsRequest))
	})
	return _c
}

func (_c *MockJobRepositoryProvider_GetJobs_Call) Return(_a0 []entity.JobToCompany, _a1 error) *MockJobRepositoryProvider_GetJobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJobRepositoryProvider_GetJobs_Call) RunAndReturn(run func(context.Context, request.GetJobsRequest) ([]entity.JobToCompany, error)) *MockJobRepositoryProvider_GetJobs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJobRepositoryProvider creates a new instance of MockJobRepositoryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobRepositoryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobRepositoryProvider {
	mock := &MockJobRepositoryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
